/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three"

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations, PerspectiveCamera, OrbitControls } from '@react-three/drei'
import { useFrame } from "@react-three/fiber"


export default function Model({ animationForward, animationBackward, animationRight, animationLeft , action, moveForwardBackward, moveRightLeft }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/character1.glb')
  const { actions } = useAnimations(animations, group)
  const previousAction = usePrevious(action);


  useFrame ( ()=> {if (animationForward == true) {(group.current.position.z += 0.01);} group.current.rotation.y = 0})
  useFrame ( ()=> {if (animationBackward == true) {(group.current.position.z -= 0.01); group.current.rotation.y = Math.PI} })
  useFrame ( ()=> {if (animationLeft == true) {(group.current.position.x -= 0.01); group.current.rotation.y = -Math.PI/2} })
  useFrame ( ()=> {if (animationRight == true) {(group.current.position.x += 0.01);group.current.rotation.y = Math.PI/2} })

  // console.log(animation)

  useEffect(() => {
    // actions[action].setLoop(THREE.LoopOnce)

    if(previousAction) {
      // actions[previousAction].loop = 5000
      // animation(true)
      // console.log(animation)
      
      actions[previousAction].fadeOut(.2)
      actions[previousAction].stop()  
    }
    console.log(actions[action].loop)
    // actions.StandingIdle.play()
    
    
    actions[action].play()
    actions[action].fadeIn(.2)
    // actions[action]
  }, [action, actions, previousAction])


   return (

    <group ref={group} dispose={null}>
      <group name="Scene">
      

        <group name="Armature001" position={[-0.02, moveRightLeft, moveForwardBackward]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>


          <primitive object={nodes.mixamorig9Hips} />



          <group name="Ch06001">
          {/* <PerspectiveCamera makeDefault position={[0,0,10]} > */}

            <skinnedMesh name="Mesh001" geometry={nodes.Mesh001.geometry} material={materials['Ch06_body.001']} skeleton={nodes.Mesh001.skeleton} />

            <skinnedMesh name="Mesh001_1" geometry={nodes.Mesh001_1.geometry} material={materials['Ch06_eyelashes.001']} skeleton={nodes.Mesh001_1.skeleton} />
            <skinnedMesh name="Mesh001_2" geometry={nodes.Mesh001_2.geometry} material={materials['Ch06_body1.001']} skeleton={nodes.Mesh001_2.skeleton} />
                
          </group>
      
        </group>
      
      </group>
      
    </group>

  )
}

useGLTF.preload('/character1.glb')

function usePrevious(value) {
  const ref = useRef()

  useEffect(() => {
    ref.current = value;
  }, [value])
  return ref.current
}
